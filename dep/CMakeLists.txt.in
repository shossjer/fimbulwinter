cmake_minimum_required(VERSION 3.0)

include(ExternalProject)

#set(_ep_tmp "@PROJECT_SOURCE_DIR@/.tmp")
#set(_ep_stamp "@PROJECT_SOURCE_DIR@/.stamp")
#set(_ep_log "@PROJECT_SOURCE_DIR@/.log")
#set(_ep_binary "@PROJECT_SOURCE_DIR@/.binary")
#set(_ep_install "@PROJECT_SOURCE_DIR@/.install")
set(_ep_download "@PROJECT_SOURCE_DIR@/.download")
set(_ep_source "@PROJECT_SOURCE_DIR@/.source")
set(_timeout 20)

if(@BUILD_ZLIB@)
	ExternalProject_Add(
		zlib

		DOWNLOAD_DIR "${_ep_download}"
		SOURCE_DIR "${_ep_source}/zlib"

		# download
		URL "https://zlib.net/zlib-1.2.11.tar.xz"
		URL_HASH "SHA256=4ff941449631ace0d4d203e3483be9dbc9da454084111f97ea0a2114e19bf066"
		TIMEOUT ${_timeout}

		# update
		UPDATE_COMMAND ""

		# configure
		CONFIGURE_COMMAND ${CMAKE_COMMAND} -C "@_initial_cache_file@" "${_ep_source}/zlib"

		# build

		# install

		# test
		TEST_COMMAND ""
		)
endif()

if(@BUILD_LIBPNG@)
	set(_dependencies)
	if(@BUILD_ZLIB@)
		set(_dependencies ${_dependencies} zlib)
	endif()

	ExternalProject_Add(
		libpng

		DEPENDS ${_dependencies}

		DOWNLOAD_DIR "${_ep_download}"
		SOURCE_DIR "${_ep_source}/libpng"

		# download
		URL "ftp://ftp-osl.osuosl.org/pub/libpng/src/archive/xz/libpng16/libpng-1.6.30.tar.xz"
		URL_HASH "SHA256=267c332ffff70cc599d3929207869f698798f1df143aa5f9597b007c14353666"
		TIMEOUT ${_timeout}

		# update
		UPDATE_COMMAND ""

		# configure
		CONFIGURE_COMMAND ${CMAKE_COMMAND} -C "@_initial_cache_file@" -DPNG_TESTS=OFF "${_ep_source}/libpng"

		# build

		# install

		# test
		TEST_COMMAND ""
		)

	unset(_dependencies)
endif()

if(@BUILD_NLOHMANN_JSON@)
	ExternalProject_Add(
		nlohmann-json

		DOWNLOAD_DIR "${_ep_download}"
		SOURCE_DIR "${_ep_source}/nlohmann-json"

		# download
		GIT_REPOSITORY "https://github.com/nlohmann/json.git"
		GIT_TAG "ce0b3fe5a334567825a554a08b76c725d0790500"

		# update
		UPDATE_COMMAND ""

		# configure
		CONFIGURE_COMMAND ${CMAKE_COMMAND} -C "@_initial_cache_file@" -DBuildTests=OFF "${_ep_source}/nlohmann-json"

		# build

		# install

		# test
		TEST_COMMAND ""
		)
endif()

if(@BUILD_CATCH@)
	ExternalProject_Add(
		catch

		DOWNLOAD_DIR "${_ep_download}"
		SOURCE_DIR "${_ep_source}/catch"

		# download
		GIT_REPOSITORY "https://github.com/philsquared/Catch.git"
		GIT_TAG "Catch1.x"

		# update
		UPDATE_COMMAND ""

		# configure
		CONFIGURE_COMMAND ${CMAKE_COMMAND} -C "@_initial_cache_file@" "${_ep_source}/catch"

		# build

		# install

		# test
		TEST_COMMAND ""
		)
endif()

if(@BUILD_FREETYPE@)
	set(_dependencies)
	if(@BUILD_ZLIB@)
		set(_dependencies ${_dependencies} zlib)
	endif()
	if(@BUILD_LIBPNG@)
		set(_dependencies ${_dependencies} libpng)
	endif()

	ExternalProject_Add(
		freetype

		DEPENDS ${_dependencies}

		DOWNLOAD_DIR "${_ep_download}"
		SOURCE_DIR "${_ep_source}/freetype"

		# download
		URL "https://download.savannah.gnu.org/releases/freetype/freetype-2.8.1.tar.gz"
		URL_HASH "SHA256=876711d064a6a1bd74beb18dd37f219af26100f72daaebd2d86cb493d7cd7ec6"
		TIMEOUT ${_timeout}

		# update
		UPDATE_COMMAND ""

		# configure
		CONFIGURE_COMMAND ${CMAKE_COMMAND} -C "@_initial_cache_file@" -DWITH_ZLIB=@BUILD_ZLIB@ -DWITH_PNG=@BUILD_LIBPNG@ -DWITH_BZip2=OFF -DWITH_HarfBuzz=OFF "${_ep_source}/freetype"

		# build

		# install

		# test
		TEST_COMMAND ""
		)

	unset(_dependencies)
endif()

if(@BUILD_GLEXT@)
	ExternalProject_Add(
		khrplatform

		DOWNLOAD_DIR "${_ep_download}"

		# download
		URL "https://www.khronos.org/registry/EGL/api/KHR/khrplatform.h"
		DOWNLOAD_NO_EXTRACT True
		TIMEOUT ${_timeout}

		# update
		UPDATE_COMMAND ""

		# configure
		CONFIGURE_COMMAND ""

		# build
		BUILD_COMMAND ""

		# install
		INSTALL_COMMAND ${CMAKE_COMMAND} -E make_directory "${CMAKE_INSTALL_PREFIX}/include/KHR"
		COMMAND ${CMAKE_COMMAND} -E copy_if_different "${_ep_download}/khrplatform.h" "${CMAKE_INSTALL_PREFIX}/include/KHR"

		# test
		TEST_COMMAND ""
		)

	ExternalProject_Add(
		glext

		DOWNLOAD_DIR "${_ep_download}"

		# download
		URL "https://www.khronos.org/registry/OpenGL/api/GL/glext.h"
		DOWNLOAD_NO_EXTRACT True
		TIMEOUT ${_timeout}

		# update
		UPDATE_COMMAND ""

		# configure
		CONFIGURE_COMMAND ""

		# build
		BUILD_COMMAND ""

		# install
		INSTALL_COMMAND ${CMAKE_COMMAND} -E make_directory "${CMAKE_INSTALL_PREFIX}/include/GL"
		COMMAND ${CMAKE_COMMAND} -E copy_if_different "${_ep_download}/glext.h" "${CMAKE_INSTALL_PREFIX}/include/GL"

		# test
		TEST_COMMAND ""
		)
endif()
