cmake_minimum_required(VERSION 3.3)

include(ExternalProject)

macro(_should_build outvar)
	set(_configs "${ARGN}")
	if(_config IN_LIST _configs)
		set(${outvar} ON)
	else()
		set(${outvar} OFF)
	endif()
endmacro()

project(dep-build NONE)

if(DEFINED CMAKE_CONFIGURATION_TYPES)
	set(_config ${CMAKE_CFG_INTDIR})
else()
	set(_config ${CMAKE_BUILD_TYPE})
endif()

set(_install_prefix "@PROJECT_SOURCE_DIR@/${_config}")

#set(_ep_tmp "@PROJECT_SOURCE_DIR@/.tmp")
#set(_ep_stamp "@PROJECT_SOURCE_DIR@/.stamp")
#set(_ep_log "@PROJECT_SOURCE_DIR@/.log")
#set(_ep_binary "@PROJECT_SOURCE_DIR@/.binary")
#set(_ep_install "@PROJECT_SOURCE_DIR@/.install")
set(_ep_download "@PROJECT_SOURCE_DIR@/.download")
set(_ep_source "@PROJECT_SOURCE_DIR@/.source")
set(_timeout 20)

_should_build(_build_zlib @_zlib_configs@)
if(_build_zlib)
	ExternalProject_Add(
		zlib

		DOWNLOAD_DIR "${_ep_download}"
		SOURCE_DIR "${_ep_source}/zlib"

		# download
		URL "https://zlib.net/zlib-1.2.11.tar.xz"
		URL_HASH "SHA256=4ff941449631ace0d4d203e3483be9dbc9da454084111f97ea0a2114e19bf066"
		TIMEOUT ${_timeout}

		# update
		UPDATE_COMMAND ""

		# configure
		CONFIGURE_COMMAND ${CMAKE_COMMAND} -C "@_initial_cache_file@" "-DCMAKE_PREFIX_PATH=${_install_prefix}" "-DCMAKE_INSTALL_PREFIX=${_install_prefix}" -DSKIP_INSTALL_FILES=ON "${_ep_source}/zlib"

		# build

		# install

		# test
		TEST_COMMAND ""
		)
endif()

_should_build(_build_libpng @_libpng_configs@)
if(_build_libpng)
	set(_dependencies)
	if(_build_zlib)
		set(_dependencies ${_dependencies} zlib)
	endif()

	ExternalProject_Add(
		libpng

		DEPENDS ${_dependencies}

		DOWNLOAD_DIR "${_ep_download}"
		SOURCE_DIR "${_ep_source}/libpng"

		# download
		URL "ftp://ftp-osl.osuosl.org/pub/libpng/src/archive/xz/libpng16/libpng-1.6.30.tar.xz"
		URL_HASH "SHA256=267c332ffff70cc599d3929207869f698798f1df143aa5f9597b007c14353666"
		TIMEOUT ${_timeout}

		# update
		UPDATE_COMMAND ""

		# configure
		CONFIGURE_COMMAND ${CMAKE_COMMAND} -C "@_initial_cache_file@" "-DCMAKE_PREFIX_PATH=${_install_prefix}" "-DCMAKE_INSTALL_PREFIX=${_install_prefix}" -Wno-dev -DPNG_TESTS=OFF -DSKIP_INSTALL_EXECUTABLES=ON -DSKIP_INSTALL_PROGRAMS=ON -DSKIP_INSTALL_FILES=ON -DSKIP_INSTALL_EXPORT=ON "${_ep_source}/libpng"

		# build

		# install

		# test
		TEST_COMMAND ""
		)

	unset(_dependencies)
endif()

_should_build(_build_json @_json_configs@)
if(_build_json)
	ExternalProject_Add(
		nlohmann-json

		DOWNLOAD_DIR "${_ep_download}"
		SOURCE_DIR "${_ep_source}/nlohmann-json"

		# download
		GIT_REPOSITORY "https://github.com/nlohmann/json.git"
		GIT_TAG "ce0b3fe5a334567825a554a08b76c725d0790500"

		# update
		UPDATE_COMMAND ""

		# configure
		CONFIGURE_COMMAND ${CMAKE_COMMAND} -C "@_initial_cache_file@" "-DCMAKE_PREFIX_PATH=${_install_prefix}" "-DCMAKE_INSTALL_PREFIX=${_install_prefix}" -DBuildTests=OFF "${_ep_source}/nlohmann-json"

		# build

		# install

		# test
		TEST_COMMAND ""
		)
endif()

_should_build(_build_catch @_catch_configs@)
if(_build_catch)
	ExternalProject_Add(
		catch

		DOWNLOAD_DIR "${_ep_download}"
		SOURCE_DIR "${_ep_source}/catch"

		# download
		GIT_REPOSITORY "https://github.com/philsquared/Catch.git"
		GIT_TAG "Catch1.x"

		# update
		UPDATE_COMMAND ""

		# configure
		CONFIGURE_COMMAND ${CMAKE_COMMAND} -C "@_initial_cache_file@" "-DCMAKE_PREFIX_PATH=${_install_prefix}" "-DCMAKE_INSTALL_PREFIX=${_install_prefix}" -DCATCH_BUILD_TESTING=OFF -DCATCH_INSTALL_DOCS=OFF -DCATCH_INSTALL_HELPERS=OFF "${_ep_source}/catch"

		# build

		# install

		# test
		TEST_COMMAND ""
		)
endif()

_should_build(_build_freetype @_freetype_configs@)
if(_build_freetype)
	set(_dependencies)
	if(_build_zlib)
		set(_dependencies ${_dependencies} zlib)
	endif()
	if(_build_libpng)
		set(_dependencies ${_dependencies} libpng)
	endif()

	ExternalProject_Add(
		freetype

		DEPENDS ${_dependencies}

		DOWNLOAD_DIR "${_ep_download}"
		SOURCE_DIR "${_ep_source}/freetype"

		# download
		URL "https://download.savannah.gnu.org/releases/freetype/freetype-2.8.1.tar.gz"
		URL_HASH "SHA256=876711d064a6a1bd74beb18dd37f219af26100f72daaebd2d86cb493d7cd7ec6"
		TIMEOUT ${_timeout}

		# update
		UPDATE_COMMAND ""

		# configure
		CONFIGURE_COMMAND ${CMAKE_COMMAND} -C "@_initial_cache_file@" "-DCMAKE_PREFIX_PATH=${_install_prefix}" "-DCMAKE_INSTALL_PREFIX=${_install_prefix}" -DWITH_ZLIB=${_build_zlib} -DWITH_PNG=${_build_libpng} -DWITH_BZip2=OFF -DWITH_HarfBuzz=OFF "${_ep_source}/freetype"

		# build

		# install

		# test
		TEST_COMMAND ""
		)

	unset(_dependencies)
endif()

_should_build(_build_glext @_glext_configs@)
if(_build_glext)
	ExternalProject_Add(
		khrplatform

		DOWNLOAD_DIR "${_ep_download}"

		# download
		URL "https://www.khronos.org/registry/EGL/api/KHR/khrplatform.h"
		DOWNLOAD_NO_EXTRACT True
		TIMEOUT ${_timeout}

		# update
		UPDATE_COMMAND ""

		# configure
		CONFIGURE_COMMAND ""

		# build
		BUILD_COMMAND ""

		# install
		INSTALL_COMMAND ${CMAKE_COMMAND} -E make_directory "${_install_prefix}/include/KHR"
		COMMAND ${CMAKE_COMMAND} -E copy_if_different "${_ep_download}/khrplatform.h" "${_install_prefix}/include/KHR"

		# test
		TEST_COMMAND ""
		)

	ExternalProject_Add(
		glext

		DOWNLOAD_DIR "${_ep_download}"

		# download
		URL "https://www.khronos.org/registry/OpenGL/api/GL/glext.h"
		DOWNLOAD_NO_EXTRACT True
		TIMEOUT ${_timeout}

		# update
		UPDATE_COMMAND ""

		# configure
		CONFIGURE_COMMAND ""

		# build
		BUILD_COMMAND ""

		# install
		INSTALL_COMMAND ${CMAKE_COMMAND} -E make_directory "${_install_prefix}/include/GL"
		COMMAND ${CMAKE_COMMAND} -E copy_if_different "${_ep_download}/glext.h" "${_install_prefix}/include/GL"

		# test
		TEST_COMMAND ""
		)
endif()
